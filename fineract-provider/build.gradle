/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
apply plugin: "org.springframework.boot"
apply plugin: "distribution"
apply plugin: "com.palantir.docker"
apply plugin: "com.gorylenko.gradle-git-properties"
apply plugin: "openjpa"
apply plugin: "com.ewerk.gradle.plugins.querydsl"

description = "Fineract"

tasks.withType(Tar){
    compression = Compression.GZIP
}

springBoot {
    buildInfo {
        properties {
            artifact = "fineract"
            version = "${project.version}"
            group = "${project.group}"
            name = "${project.description}"
        }
    }
}

openjpa {
    includes = ['**/AbstractPersistableCustom.class', '**/domain/*.class']
    enhance {
        enforcePropertyRestrictions true
    }
}

querydsl {
    jpa = true
    querydslDefault = false
    querydslSourcesDir = "$buildDir/generated/sources/querydsl/main"
    /*
    aptOptions = [
        "querydsl.entityAccessors=true",
        "querydsl.useFields=true"
    ]
    */
}

compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}

sourceSets {
    main {
        java {
            srcDir "$buildDir/generated/sources/querydsl/main"
        }
    }
}

dependencies {
    runtimeOnly "org.springframework.boot:spring-boot-devtools"
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-data-jpa"
    compile "org.springframework.boot:spring-boot-starter-security"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-activemq"
    compile "org.springframework.boot:spring-boot-starter-cache"
    compile "org.springframework.boot:spring-boot-starter-quartz"
    compile "org.springframework.boot:spring-boot-starter-jersey"
    compile "org.glassfish.jersey.media:jersey-media-multipart"
    compile "org.glassfish.jersey.media:jersey-media-sse"
    compile "org.glassfish.jersey.media:jersey-media-jaxb"
    compile "org.glassfish.jersey.ext:jersey-spring5"
    compile "org.ow2.asm:asm-all"
    compile "org.springframework.security.oauth:spring-security-oauth2"
    compile "org.apache.openjpa:openjpa"
    compile "com.squareup.retrofit2:retrofit"
    compile "com.squareup.okhttp3:okhttp"
    compile "com.google.code.gson:gson"
    compile "com.google.guava:guava"
    compile "joda-time:joda-time"
    compile "org.apache.commons:commons-email"
    compile "org.apache.commons:commons-lang3"
    compile "mysql:mysql-connector-java"
    compile "org.apache.poi:poi"
    compile "org.apache.poi:poi-ooxml"
    compile "org.apache.poi:poi-ooxml-schemas"
    compile "org.apache.openjpa:openjpa-all"
    compile "com.lowagie:itext"
    compile "org.mnode.ical4j:ical4j"
    compile "org.flywaydb:flyway-core"
    compile "com.amazonaws:aws-java-sdk-s3"
    compile "org.ehcache:ehcache"
    compile "com.github.spullara.mustache.java:compiler"
    compile "com.jayway.jsonpath:json-path"
    compile "org.apache.tika:tika-core"
    compile "io.swagger:swagger-jersey-jaxrs"
    compile "javax.validation:validation-api"
    compile "javax.cache:cache-api"
    compile "org.apache.bval:org.apache.bval.bundle:2.0.2"
    compile "joda-time:joda-time"
    compile "com.querydsl:querydsl-core"
    compile "com.querydsl:querydsl-sql"
    compile "com.querydsl:querydsl-sql-spring"
    compile "com.querydsl:querydsl-sql-codegen"
    compile "com.querydsl:querydsl-codegen"
    compile "com.querydsl:querydsl-jpa"
    compile "com.querydsl:querydsl-jpa-codegen"

    testCompile "junit:junit"
    testCompile "org.mockito:mockito-core"
    testCompile "com.jayway.restassured:rest-assured"
    testCompile "org.springframework.boot:spring-boot-starter-test"
    testCompile "org.testcontainers:mysql"
    // testCompile "org.testcontainers:localstack"
    // testCompile "com.avides.springboot.testcontainer:springboot-testcontainer-activemq"
    // testCompile "com.avides.springboot.testcontainer:springboot-testcontainer-mysql"

    integrationTestImplementation "junit:junit"
    integrationTestImplementation "com.jayway.restassured:rest-assured"
    integrationTestImplementation "com.google.code.gson:gson"
    integrationTestImplementation "com.google.guava:guava"
    integrationTestImplementation "org.apache.poi:poi"
    integrationTestImplementation "org.apache.poi:poi-ooxml"
    integrationTestImplementation "org.apache.poi:poi-ooxml-schemas"
    integrationTestImplementation "javax.ws.rs:javax.ws.rs-api"
    integrationTestImplementation "joda-time:joda-time"
    integrationTestImplementation "org.apache.openjpa:openjpa"
    integrationTestImplementation "mysql:mysql-connector-java"
}

tasks.distZip.enabled = false

def distributionsCopySpec = copySpec {
    into("fineract") {
        from "${buildDir}/${libsDirName}"
        exclude { FileTreeElement details ->
            details.file.name.endsWith(".original") || details.file.name.endsWith("-sources.jar")
        }
    }
}

bootJar {
    archiveFileName = "fineract-provider.jar"
}

task fatJarTar(type: Tar, dependsOn: "bootJar") { with distributionsCopySpec }

docker {
    name "fineract:latest"
    tag "build", "fineract:${project.version}"
    dependsOn fatJarTar
    files tasks.fatJarTar.outputs
}
